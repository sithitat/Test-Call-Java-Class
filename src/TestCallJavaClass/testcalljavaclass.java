/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TestCallJavaClass;
import TestWriteLogFileClass.testwritelogfileclass;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author bcc14
 */
public class testcalljavaclass extends javax.swing.JFrame {
    public static final String formatDate = "yyyyMMdd";
    public static final String formatDateTimeFull = "dd/MM/yyyy HH:mm:ss";
    
    /**
     * Creates new form testcalljavaclass
     */
    public testcalljavaclass() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCallClassA = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCallClassA.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnCallClassA.setText("Call Class A");
        btnCallClassA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCallClassAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCallClassA, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(518, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCallClassA, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(451, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCallClassAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCallClassAActionPerformed
        // TODO add your handling code here:
        // Create an instance of myLog
        testwritelogfileclass myLog = new testwritelogfileclass();
        
        myLog.WriteErrorToFileByDateTimeV2("ErrorTitleV2", "ErrorDescriptionV2");
        // myLog.WriteErrorToFileByDateTime("ErrorTitle", "ErrorDescription");
        // myLog.WriteErrorToFileByDateTimeHourMin("ErrorTitle", "ErrorDescription");
        // myLog.WriteErrorToFile("ErrorTitle", "ErrorDescription");
        // myLog.WriteErrorToFile("ErrorTitle", new Exception("Some error message"));
        
    }//GEN-LAST:event_btnCallClassAActionPerformed

    /*
    private void WriteErrorToFileByDateTimeV2(String sPrmErrTitle, String sPrmErrDesc) {
        String sFileDate = getSystemDate(formatDate);
        String sFileName = sFileDate + ".log";
        String sPathFile = "";
        String sErrorDisplay = "";

        try {
            Path basePath = Paths.get(".").toAbsolutePath().normalize();
            sPathFile = basePath.resolve("Error").resolve(sPrmErrTitle).resolve(sFileName).toString();

            Path parentDir = Paths.get(sPathFile).getParent();
            if (!Files.exists(parentDir)) {
                Files.createDirectories(parentDir);
                Files.createFile(parentDir.resolve(sFileName));
            }

            try (PrintWriter pWriter = new PrintWriter(new BufferedWriter(new FileWriter(sPathFile, true)))) {
                pWriter.println(getSystemDate(formatDateTimeFull) + ": ");
                pWriter.println(sPrmErrDesc);
            }
        } catch (IOException ex) {
            sErrorDisplay = DisplayLogMessage(ex);
            Logger.getLogger(testcalljavaclass.class.getName()).log(Level.SEVERE, null, sErrorDisplay);
        }
    }
    
    private String getSystemDate(String format) {
        try{
            DateFormat dateFormat = new SimpleDateFormat(format,Locale.US);
            Date date = new Date();
            return dateFormat.format(date);
        }
        catch (Exception e){
            return null;
        }
    }

    private String DisplayLogMessage(Exception PrmEx){
        String sReturnMessage;
        String sErrDateTime;
        String sErrString;
        String sErrFull;
        String sErrLine;
        
        StackTraceElement[] stackTrace = PrmEx.getStackTrace();
        sErrDateTime = getSystemDate(formatDateTimeFull);

        sErrString = PrmEx.getMessage();
        // sErrFull = PrmEx.getStackTrace()[0].getMethodName();
        sErrFull = stackTrace[0].getMethodName();
        // sErrLine = String.valueOf(PrmEx.getStackTrace()[1].getLineNumber());
        sErrLine = String.valueOf(stackTrace[1].getLineNumber());
        
        sErrString = sErrString + "[" + sErrFull + " - at Line No." + sErrLine + "]";
        // sErrFull = sErrDateTime + ":" + PrmEx.getStackTrace()[1].getFileName() + " --> " + PrmEx.getStackTrace()[1].getClassName() + " --> " + PrmEx.getStackTrace()[1].getMethodName();
        sErrFull = sErrDateTime + ":" + stackTrace[1].getFileName() + " --> " + stackTrace[1].getClassName() + " --> " + stackTrace[1].getMethodName();
        sErrString = sErrFull + " --> " + sErrString;
        
        sReturnMessage = sErrString;
        
        return sReturnMessage;
    }
    */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(testcalljavaclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(testcalljavaclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(testcalljavaclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(testcalljavaclass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new testcalljavaclass().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCallClassA;
    // End of variables declaration//GEN-END:variables
}
